#!groovy
@Library("k8s-utils@2.x")

String[] legacyCeFeatures = ["tests/legacy/features"]
String[] legacyEeFeatures = ["tests/legacy/features"]
String launchUnitTests = "yes"
String eeBranch = "master"
String eeOwner = "akeneo"
String launchCeFrontAcceptanceTests = "yes"
String launchEeFrontAcceptanceTests = "yes"
String launchCeBackAcceptanceTests = "yes"
String launchEeBackAcceptanceTests = "yes"
String launchCeFrontIntegrationTests = "yes"
String launchEeFrontIntegrationTests = "yes"
String launchCeBackIntegrationTests = "yes"
String launchEeBackIntegrationTests = "yes"
String launchCeEndToEndTests = "yes"
String launchEeEndToEndTests = "yes"
String verboseOutputs = "yes"
String slackChannel = ""
String tag = "eu.gcr.io/akeneo-ci/pim-community-dev:${env.BRANCH_NAME}"
String composer_command = "update"

stage("Build") {
    milestone 1
    if (env.BRANCH_NAME =~ /^PR-/) {
        timeout(time:5, unit:'DAYS') {
            userInput = input(message: 'Launch tests?', parameters: [
                string(defaultValue: '2.3', description: 'Enterprise Edition branch used for the build', name: 'eeBranch'),
                string(defaultValue: 'akeneo', description: 'Owner of the repository on GitHub', name: 'eeOwner'),
                choice(choices: 'yes\nno', description: 'Run unit tests and code style checks', name: 'launchUnitTests'),
                choice(choices: 'yes\nno', description: 'Run front acceptance tests', name: 'launchCeFrontAcceptanceTests'),
                choice(choices: 'yes\nno', description: 'Run EE front acceptance tests', name: 'launchEeFrontAcceptanceTests'),
                choice(choices: 'yes\nno', description: 'Run back acceptance tests', name: 'launchCeBackAcceptanceTests'),
                choice(choices: 'yes\nno', description: 'Run EE back acceptance tests', name: 'launchEeBackAcceptanceTests'),
                choice(choices: 'yes\nno', description: 'Run front integration tests', name: 'launchCeFrontIntegrationTests'),
                choice(choices: 'yes\nno', description: 'Run EE front integration tests', name: 'launchEeFrontIntegrationTests'),
                choice(choices: 'yes\nno', description: 'Run back integration tests', name: 'launchCeBackIntegrationTests'),
                choice(choices: 'yes\nno', description: 'Run EE back integration tests', name: 'launchEeBackIntegrationTests'),
                choice(choices: 'yes\nno', description: 'Run end to end tests (whole Legacy Behat suite)', name: 'launchCeEndToEndTests'),
                choice(choices: 'yes\nno', description: 'Run EE end to end tests (whole Legacy Behat suite)', name: 'launchEeEndToEndTests'),
                string(defaultValue: 'tests/legacy/features', description: 'Legacy end to end tests to run', name: 'legacyCeFeatures'),
                string(defaultValue: 'tests/legacy/features,vendor/akeneo/pim-community-dev/tests/legacy/features', description: 'Legacy Ee end to end tests to run', name: 'legacyEeFeatures'),
                choice(choices: 'no\nyes', description: 'Enable Verbose mode', name: 'verboseOutputs'),
                string(defaultValue: '', description: 'Channel or user to notify (example : "#channel,@user")', name: 'slackChannel'),
            ])

            legacyCeFeatures = userInput['legacyCeFeatures'].tokenize(',')
            legacyEeFeatures = userInput['legacyEeFeatures'].tokenize(',')
            launchUnitTests = userInput['launchUnitTests']
            eeBranch = userInput['eeBranch']
            eeOwner = userInput['eeOwner']
            launchCeFrontAcceptanceTests = userInput['launchCeFrontAcceptanceTests']
            launchEeFrontAcceptanceTests = userInput['launchEeFrontAcceptanceTests']
            launchCeBackAcceptanceTests = userInput['launchCeBackAcceptanceTests']
            launchEeBackAcceptanceTests = userInput['launchEeBackAcceptanceTests']
            launchCeFrontIntegrationTests = userInput['launchCeFrontIntegrationTests']
            launchEeFrontIntegrationTests = userInput['launchEeFrontIntegrationTests']
            launchCeBackIntegrationTests = userInput['launchCeBackIntegrationTests']
            launchEeBackIntegrationTests = userInput['launchEeBackIntegrationTests']
            launchCeEndToEndTests = userInput['launchEndToEndTests']
            launchEeEndToEndTests = userInput['launchEndToEndTests']
            verboseOutputs = userInput['verboseOutputs']
            slackChannel = userInput['slackChannel']
            composer_command = "install"
        }
    }
    milestone 2

    withCredentials([string(credentialsId: 'composer-token', variable: 'token')]) {
        parallel(
            "pim-ce": {
                pod {
                    container('docker') {
                        checkout scm

                        sh "cp .ci/Dockerfile Dockerfile"
                        sh "gcloud container builds submit --config .ci/builder.yaml --substitutions _IMAGE_TAG=${tag},_COMPOSER_COMMAND=${composer_command} ."
                    }
                }
            },
            "pim-ee": {
                if (launchEeFrontAcceptanceTests.equals("yes") || launchEeBackAcceptanceTests.equals("yes") || launchEeFrontIntegrationTests.equals("yes") || launchEeBackIntegrationTests.equals("yes") || launchEeEndToEndTests.equals("yes")) {
                    pod {
                        container('docker') {
                            checkout([$class: 'GitSCM',
                                branches: [[name: eeBranch]],
                                userRemoteConfigs: [[credentialsId: 'github-credentials', url: "https://github.com/${eeOwner}/pim-enterprise-dev.git"]]
                            ])

                            dir('packages/pim-community-dev') {
                                checkout scm
                            }

                            sh "cp .ci/Dockerfile Dockerfile"
                            sh "gcloud container builds submit --config .ci/builder.yaml --substitutions _IMAGE_TAG=${tag}-ee,_COMPOSER_COMMAND=${composer_command} ."
                        }
                    }
                } else {
                    echo "Skipping Enterprise Edition matrix"
                }
            }
        )
    }
}

stage("Test") {
    try {
        parallel(
            // UNIT TESTS & MISC
            "back-php-coupling-detector": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && vendor/bin/php-coupling-detector detect --config-file=.php_cd.php src && vendor/bin/php-coupling-detector detect --config-file=src/Akeneo/UserManagement/.php_cd.php src/Akeneo/UserManagement && vendor/bin/php-coupling-detector detect --config-file=src/Akeneo/Channel/.php_cd.php src/Akeneo/Channel"
            )},
            "back-phpunit": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && vendor/bin/phpunit -c app/phpunit.xml.dist --testsuite PIM_Unit_Test --log-junit %workspace%/junit_output.xml",
                junit: "junit_output.xml"
            )},
            "back-phpspec": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && su -s /bin/sh www-data -c './vendor/bin/phpspec run --format=junit' > %workspace%/junit_output.xml",
                junit: "junit_output.xml"
            )},
            "back-php-cs-fixer": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && vendor/bin/php-cs-fixer fix --diff --dry-run --config=.php_cs.php --format=junit > %workspace%/junit_output.xml",
                junit: "junit_output.xml"
            )},
            "back-check-pullup": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && bin/check-pullup"
            )},
            "front-lint": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && yarn run lint"
            )},
            "front-unit": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && yarn run unit"
            )},

            // ACCEPTANCE TESTS
            "front-acceptance-ce": {testif(
                condition: launchCeFrontAcceptanceTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && yarn run webpack-test && MAX_RANDOM_LATENCY_MS=100 yarn run acceptance ./tests/features"
            )},
            "front-acceptance-ee": {testif(
                condition: launchEeFrontAcceptanceTests.equals("yes"),
                container: "${tag}-ee",
                script: "cd /var/www/pim && yarn run webpack-test && MAX_RANDOM_LATENCY_MS=100 yarn run acceptance ./vendor/akeneo/pim-community-dev/tests/features ./tests/features"
            )},
            "back-acceptance-ce": {testif(
                condition: launchCeBackAcceptanceTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && vendor/bin/behat --strict -p acceptance -vv"
            )},
            "back-acceptance-ee": {testif(
                condition: launchEeBackAcceptanceTests.equals("yes"),
                container: "${tag}-ee",
                script: "cd /var/www/pim && vendor/bin/behat --strict -p acceptance -vv"
            )},

            // INTEGRATION TESTS
            "front-integration-ce": {testif(
                condition: launchCeFrontIntegrationTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && yarn run webpack-test && yarn run integration"
            )},
            "front-integration-ee": {testif(
                condition: launchEeFrontIntegrationTests.equals("yes"),
                container: "${tag}-ee",
                script: "cd /var/www/pim && yarn run webpack-test && yarn run integration"
            )},
            "back-legacy-phpunit-integration-ce": {queue(
                condition: launchCeBackIntegrationTests.equals("yes"),
                verbose: (verboseOutputs == "yes"),
                container: tag,
                containers: pimContainers(image: tag, selenium: false),
                fetcher: {return pimPhpunitFetcher(paths:["/var/www/pim/src", "/var/www/pim/tests"])},
                parallelism: 50
            )},
            "back-legacy-phpunit-integration-ee": {queue(
                condition: launchEeBackIntegrationTests.equals("yes"),
                verbose: (verboseOutputs == "yes"),
                container: "${tag}-ee",
                containers: pimContainers(image: "${tag}-ee", selenium: false),
                fetcher: {return pimPhpunitFetcher(paths:["/var/www/pim/src", "/var/www/pim/vendor/akeneo/pim-community-dev/src", "/var/www/pim/vendor/akeneo/pim-community-dev/tests"])},
                parallelism: 50
            )},

            // END TO END TESTS
            "legacy-end-to-end-behat-ce": {queue(
                condition: launchCeEndToEndTests.equals("yes"),
                verbose: (verboseOutputs == "yes"),
                container: tag,
                containers: pimContainers(image: tag),
                fetcher: {return pimBehatFetcher(hasToInstall: true, profiles: ["legacy"], features: legacyCeFeatures)}
            )},
            "legacy-end-to-end-behat-ee": {queue(
                condition: launchEeEndToEndTests.equals("yes"),
                verbose: (verboseOutputs == "yes"),
                container: "${tag}-ee",
                containers: pimContainers(image: "${tag}-ee"),
                fetcher: {return pimBehatFetcher(hasToInstall: true, profiles: ["legacy"], features: legacyEeFeatures)}
            )}
        )
    } finally {
        notifySlack(slackChannel)
    }
}
